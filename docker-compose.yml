version: "3.9"

services:
  proxy:
    image: traefik:v2.9
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./etc/traefik.yml:/traefik.yml:ro
      - ./etc/acme.json:/acme.json
    command:
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --providers.docker.swarmmode
      - --accesslog
      - --log
      - --api
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.traefik-https-redirect.redirectscheme.permanent=true
        - traefik.http.routers.traefik-proxy-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
        - traefik.http.routers.traefik-proxy-http.entrypoints=http
        - traefik.http.routers.traefik-proxy-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
        - traefik.http.routers.traefik-proxy-https.entrypoints=https
        - traefik.http.routers.traefik-proxy-https.tls=true
        - traefik.http.routers.traefik-proxy-https.tls.certresolver=le
        - traefik.http.services.traefik-proxy.loadbalancer.server.port=80
        - traefik.http.middlewares.traefik-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN?Variable not set})/(.*)
        - traefik.http.middlewares.traefik-www-redirect.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
        - traefik.http.routers.traefik-proxy-https.middlewares=traefik-www-redirect
        - traefik.http.routers.traefik-proxy-http.middlewares=traefik-www-redirect,traefik-https-redirect

  db:
    image: postgres:latest
    volumes:
      - app-db-data:/var/lib/postgresql/data/
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      placement:
        constraints:
          - node.labels.traefik.app-db-data == true

  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    networks:
      - default
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.traefik-pgadmin-http.rule=PathPrefix(`/pgadmin`)
        - traefik.http.routers.traefik-pgadmin-http.entrypoints=http
        - traefik.http.routers.traefik-pgadmin-http.middlewares=traefik-https-redirect
        - traefik.http.routers.traefik-pgadmin-https.rule=PathPrefix(`/pgadmin`)
        - traefik.http.routers.traefik-pgadmin-https.entrypoints=https
        - traefik.http.routers.traefik-pgadmin-https.tls=true
        - traefik.http.routers.traefik-pgadmin-https.tls.certresolver=le
        - traefik.http.services.traefik-pgadmin.loadbalancer.server.port=5050

  backend:
    image: ${BACKEND_IMAGE}
    build:
      context: .
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
    environment:
        DEBUG: ${DEBUG}

        BACKEND_TTILE: ${BACKEND_TTILE}
        BACKEND_DESCRIPTION: ${BACKEND_DESCRIPTION}
        BACKEND_PREFIX: ${BACKEND_PREFIX}

        BACKEND_HOST: ${BACKEND_HOST}
        BACKEND_PORT: ${BACKEND_PORT}
        BACKEND_RELOAD: ${BACKEND_RELOAD}

        BACKEND_DISABLE_MANUAL_SCHEDULE_UPDATE: ${BACKEND_DISABLE_MANUAL_SCHEDULE_UPDATE}

        POSTGRES_SERVER: ${POSTGRES_SERVER}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}

        BROKER_HOST: ${BROKER_HOST}
        BROKER_PORT: ${BROKER_PORT}
        BROKER_USER: ${BROKER_USER}
        BROKER_PASS: ${BROKER_PASS}
        BROKER_URL: ${BROKER_URL}

        ENV: development
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.traefik-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
        - traefik.http.services.traefik-backend.loadbalancer.server.port=80
        - traefik.http.routers.traefik-backend-http.entrypoints=http
        - traefik.http.routers.traefik-backend-http.middlewares=traefik-https-redirect
        - traefik.http.routers.traefik-backend-https.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
        - traefik.http.routers.traefik-backend-https.entrypoints=https
        - traefik.http.routers.traefik-backend-https.tls=true
        - traefik.http.routers.traefik-backend-https.tls.certresolver=le
        - traefik.http.routers.traefik-backend-https.middlewares=traefik-https-redirect

  broker:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${BROKER_USER}
      RABBITMQ_DEFAULT_PASS: ${BROKER_PASS}
    volumes:
      - broker:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - default
    healthcheck:
      test: rabbitmq-diagnostics check_running
      interval: 10s
      timeout: 5s
      retries: 5

  worker:
    image: ${WORKER_IMAGE}
    build:
      context: .
      dockerfile: ./worker/Dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    environment:
      - BROKER_URL=${BROKER_URL}
      - LOG_LEVEL=TRACE
      - C_FORCE_ROOT=true
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - default


volumes:
  app-db-data:
  pgadmin-data:
  broker:
