version: "3.9"

services:
  proxy:
    image: traefik:v2.9
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./etc/traefik.yml:/traefik.yml:ro
      - ./etc/acme.json:/acme.json
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    deploy:
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.traefik-https-redirect.redirectscheme.permanent=true
        # Handle host with and without "www" to redirect to only one of them
        # Uses environment variable DOMAIN
        # To disable www redirection remove the Host() you want to discard, here and
        # below for HTTPS
        - traefik.http.routers.traefik-proxy-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
        - traefik.http.routers.traefik-proxy-http.entrypoints=http
        # traefik-https the actual router using HTTPS
        - traefik.http.routers.traefik-proxy-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
        - traefik.http.routers.traefik-proxy-https.entrypoints=https
        - traefik.http.routers.traefik-proxy-https.tls=true
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.traefik-proxy-https.tls.certresolver=le
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-proxy.loadbalancer.server.port=80
        # Middleware to redirect www, to disable it remove the next line
        - traefik.http.middlewares.traefik-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN?Variable not set})/(.*)
        # Redirect a domain with www to non-www
        # To disable it remove the next line
        - traefik.http.middlewares.traefik-www-redirect.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
        # Middleware to redirect www, to disable it remove the next line 
        - traefik.http.routers.traefik-proxy-https.middlewares=traefik-www-redirect
        # Middleware to redirect www, and redirect HTTP to HTTPS
        # to disable www redirection remove the section: traefik-www-redirect,
        - traefik.http.routers.traefik-proxy-http.middlewares=traefik-www-redirect,traefik-https-redirect
        
  database:
    container_name: database
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    deploy:
      placement:
        constraints:
          - node.labels.traefik.app-db-data == true

  pgadmin:
    image: dpage/pgadmin4
    networks:
      - default
    depends_on:
      - database
    env_file:
      - .env
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.traefik-pgadmin-http.rule=PathPrefix(`/pgadmin`)
        - traefik.http.routers.traefik-pgadmin-http.entrypoints=http
        - traefik.http.routers.traefik-pgadmin-http.middlewares=traefik-https-redirect
        - traefik.http.routers.traefik-pgadmin-https.rule=PathPrefix(`/pgadmin`)
        - traefik.http.routers.traefik-pgadmin-https.entrypoints=https
        - traefik.http.routers.traefik-pgadmin-https.tls=true
        - traefik.http.routers.traefik-pgadmin-https.tls.certresolver=le
        - traefik.http.services.traefik-pgadmin.loadbalancer.server.port=5050

  backend:
    depends_on:
      - database
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      - PRE_START_PATH=/prestart.sh
    build:
      context: .
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.traefik-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
        - traefik.http.services.traefik-backend.loadbalancer.server.port=80
        - traefik.http.routers.traefik-backend-http.entrypoints=http
        - traefik.http.routers.traefik-backend-http.middlewares=traefik-https-redirect
        - traefik.http.routers.traefik-backend-https.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
        - traefik.http.routers.traefik-backend-https.entrypoints=https
        - traefik.http.routers.traefik-backend-https.tls=true
        - traefik.http.routers.traefik-backend-https.tls.certresolver=le
        - traefik.http.routers.traefik-backend-https.middlewares=traefik-https-redirect

  queue:
    image: rabbitmq:3

  celeryworker:
    depends_on:
      - database
      - queue
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      # - SMTP_HOST=${SMTP_HOST?Variable not set}
    build:
      context: .
      dockerfile: celeryworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}


volumes:
  app-db-data:
  pgadmin-data:
