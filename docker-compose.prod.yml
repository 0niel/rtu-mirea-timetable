version: "3.9"

services:
  traefik:
    image: traefik:v2.9
    command:
      - --accesslog=true
      - --log.level=INFO
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`,`timetable`)
      - --entrypoints.timetable_web.address=:80
      - --entrypoints.timetable_websecure.address=:443
      # LetsEncrypt Staging Server
      # - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=timetable_web
      - --certificatesresolvers.letsencrypt.acme.email=${EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/letsencrypt:/letsencrypt
    depends_on:
      - backend
    networks:
      - gateway
      - application

  db:
    image: postgres:15.4
    volumes:
      - app-db-data:/var/lib/postgresql/data/
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    networks:
      - default
    expose:
      - "5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  frontend:
    image: ${FRONTEND_IMAGE}
    networks:
      - application
      - default
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=timetable
      - traefik.docker.network=application
      - traefik.http.services.timetable_frontend.loadbalancer.server.port=3000
      #http
      - traefik.http.routers.timetable_frontend_http.entrypoints=timetable_web
      - traefik.http.routers.timetable_frontend_http.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.timetable_frontend_http.service=timetable_frontend
      - traefik.http.routers.timetable_frontend_http.middlewares=timetable_frontend_redirect_https
      # https
      - traefik.http.middlewares.timetable_frontend_redirect_https.redirectscheme.scheme=https
      - traefik.http.middlewares.timetable_frontend_redirect_https.redirectscheme.permanent=true
      - traefik.http.routers.timetable_frontend_https.entrypoints=timetable_websecure
      - traefik.http.routers.timetable_frontend_https.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.timetable_frontend_https.service=timetable_frontend
      - traefik.http.routers.timetable_frontend_https.tls=true
      - traefik.http.routers.timetable_frontend_https.tls.certresolver=${CERT_RESOLVER}

  backend:
    image: ${BACKEND_IMAGE}
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_healthy
    volumes:
      - .:/app
      - ./docs:/app/docs # schedule docs
    networks:
      - application
      - default
    environment:
        DB_USER: ${DB_USER}
        DB_PASSWORD: ${DB_PASSWORD}
        DB_DATABASE: ${DB_DATABASE}
        DB_HOST: ${DB_HOST}
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=timetable
      - traefik.docker.network=application
      - traefik.http.services.timetable.loadbalancer.server.port=80
      #http
      - traefik.http.routers.timetable_http.entrypoints=timetable_web
      - traefik.http.routers.timetable_http.rule=(Host(`${DOMAIN}`) && PathPrefix(`/api`)) || (Host(`${DOMAIN}`) && PathPrefix(`/docs`))
      - traefik.http.routers.timetable_http.service=timetable
      - traefik.http.routers.timetable_http.middlewares=timetable_redirect_https
      # https
      - traefik.http.middlewares.timetable_redirect_https.redirectscheme.scheme=https
      - traefik.http.middlewares.timetable_redirect_https.redirectscheme.permanent=true
      - traefik.http.routers.timetable_https.entrypoints=timetable_websecure
      - traefik.http.routers.timetable_https.rule=(Host(`${DOMAIN}`) && PathPrefix(`/api`)) || (Host(`${DOMAIN}`) && PathPrefix(`/docs`))
      - traefik.http.routers.timetable_https.service=timetable
      - traefik.http.routers.timetable_https.tls=true
      - traefik.http.routers.timetable_https.tls.certresolver=${CERT_RESOLVER}

  broker:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${BROKER_USER}
      RABBITMQ_DEFAULT_PASS: ${BROKER_PASS}
    volumes:
      - broker:/var/lib/rabbitmq
    expose:
      - "5672"
    networks:
      - default
    healthcheck:
      test: rabbitmq-diagnostics check_running
      interval: 10s
      timeout: 5s
      retries: 5

  worker:
    build:
      context: .
      dockerfile: ./worker/Dockerfile
    volumes:
      - ./files:/app/files
    environment:
      BROKER_URL: ${BROKER_URL}
      LOG_LEVEL: DEBUG
      C_FORCE_ROOT: true
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - default


volumes:
  app-db-data:
  broker:

networks:
  gateway:
  application:
